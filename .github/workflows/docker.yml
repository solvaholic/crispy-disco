name: Docker

on:
  push:
    # Only run when one of these files change.
    paths:
      - Dockerfile
      - entrypoint.sh
      - .github/workflows/docker.yml

    # Publish `master` as Docker `latest` image.
    branches:
      - master
      - v2

    # Publish `vx.y.z` tags as releases.
    tags:
      - v[0-9]+.[0-9]+.[0-9]+

  # Run tests for any pull requests.
  pull_request:
    paths:
      - Dockerfile
      - entrypoint.sh
      - .github/workflows/docker.yml
    branches:
      - master
      - 'v2'
    tags:
      - v[12].[0-9]+.[0-9]+

env:
  IMAGE_NAME: crispy-disco

jobs:
  # Prove the image successfully builds.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi

  # Push image to GitHub's package registry and to Docker hub.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing images.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag image

      - name: Login to docker.pkg.github.com
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | \
          docker login docker.pkg.github.com \
          -u ${{ github.actor }} --password-stdin

      - name: Push image to docker.pkg.github.com
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME

          # Build image tag strings to push to GitHub's package registry.
          _push_tags=""

          # If GITHUB_REF is a branch, use the branch name.
          if [[ "${GITHUB_REF}" == "refs/heads/"* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
            # If branchname is mater, use the latest instead.
            [ "$VERSION" = "master" ] && VERSION=latest
            _push_tags+=\ $IMAGE_ID:$VERSION

          # If GITHUB_REF looks like a version tag, use the tag name after
          # the leading v so vX.Y.Z becomes X.Y.Z.
          elif [[ "${GITHUB_REF}" == "refs/tags/v"* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            _push_tags+=\ $IMAGE_ID:$VERSION
            # If this looks like a semantic version tag, also tag the major.
            _push_tags+=\ $IMAGE_ID:${VERSION%%.*}

          # If GITHUB_REF didn't match either of those rules, freak out.
          else
            echo "FAIL: Did not recognize GITHUB_REF '${GITHUB_REF}'."
            exit 1
          fi

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          for _this_tag in _push_tags; do
            echo "INFO: Tagging and pushing ${_this_tag}."
            docker tag image ${_this_tag}
            docker push ${_this_tag}
          done

      - name: Login to Docker hub
        run: |
          echo "${{ secrets.dockerhub_token }}" | \
          docker login -u ${{ github.actor }} --password-stdin

      - name: Push image to Docker hub
        run: |
          IMAGE_ID=solvaholic/$IMAGE_NAME

          # Build image tag strings to push to Docker hub.
          _push_tags=""

          # If GITHUB_REF is a branch, use the branch name.
          if [[ "${GITHUB_REF}" == "refs/heads/"* ]]; then
            VERSION=${GITHUB_REF#refs/heads/}
            # If branchname is mater, use the latest instead.
            [ "$VERSION" = "master" ] && VERSION=latest
            _push_tags+=\ $IMAGE_ID:$VERSION

          # If GITHUB_REF looks like a version tag, use the tag name after
          # the leading v so vX.Y.Z becomes X.Y.Z.
          elif [[ "${GITHUB_REF}" == "refs/tags/v"* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
            _push_tags+=\ $IMAGE_ID:$VERSION
            # If this looks like a semantic version tag, also tag the major.
            _push_tags+=\ $IMAGE_ID:${VERSION%%.*}

          # If GITHUB_REF didn't match either of those rules, freak out.
          else
            echo "FAIL: Did not recognize GITHUB_REF '${GITHUB_REF}'."
            exit 1
          fi

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          for _this_tag in _push_tags; do
            echo "INFO: Tagging and pushing ${_this_tag}."
            docker tag image ${_this_tag}
            docker push ${_this_tag}
          done
